Usage
=====

Connessione e Creazione delle tabelle
-------------------------------------

Si può utilizzare la classe ``Connection()`` e i relativi metodi per effettuare la connessione.

.. py:class:: Connection(connection)

    :connection: richiama una funzione che apre la connessione al database postgres.

    .. py:classmethod:: check_connection()

        verifica appunto la connessione.

    La connessione può essere chiusa mediante ``close_connection()`` fornendogli in ingresso la connessione.

Nella classe ``BoostrapSchema`` vengono definite le query per la creazione delle tabelle.

.. py:class:: BoostrapSchema(table_list)

    :table_list: una lista appunto contenente delle funzioni, ognuna delle quali contiene la query per la creazione della relativa tabella.

    .. py:classmethod:: execute_query

        prende in ingresso la connessione ed esegue la query per ogni tabella all'interno della lista.

    .. py:classmethod:: commit_query

Caricamento Dati
----------------

La classe ``CSV Reader`` può essere utilizzata per leggere gli excel.

.. py:class:: CSVReader (data,nrows,column_data)

    :data: viene restituito dal metodo ``load_excel``

    :nrows: viene restituito dal metodo ``num_rows``

    :column_data: viene restituito dal metodo ``retrieve_column``

    .. py:classmethod:: load_excel (path)

        restituisce la tabella excel fornendogli in ingresso il path

    .. py:classmethod:: num_rows

        restituisce il numero di righe, prendendo in ingresso la tabella

    .. py:classmethod:: retrieve_column

        restituisce solo parte della tabella, quella relativa alle colonne selezionate (prende in ingresso la tabella e una lista di colonne)


La classe ``Dynamic Load`` viene utilizzata per caricare in ciascun file dto i dati presi dalle tabelle excel.

.. py:class:: DynamicLoad

    .. py:classmethod:: to_dto (path, file_dto, index_col)

        questo metodo vuole in ingresso il path, il file dto in cui vanno mappati i dati e gli indici delle colonne da considerare nella tabella. Mediante il path e i metodi di CSVReader i dati delle colonne selezionate vengono presi dall'excel. Con due cicli for annidati (all'esterno sulle colonne, all'interno sulle righe) seleziono ogni elemento e lo aggiungo al dto mediante i metodi get e set di ciascun dto.

Più nel dettaglio, i nomi delle colonne degli excel vengono modificate mediante i metodi parser affinchè corrispondano alle funzione di set e get di ciascun dto:

.. py:function:: parse_method_name (method_name)

    prende in ingresso il nome della colonna, e si occupa di mettere il "_" prima di ogni lettera maiuscola all'interno della parola (tranne la prima) e rende tutte le lettere minuscole

.. py:function:: parse_method_element (element)

    si occupa di verificare se ci solo elementi NaN e in caso sotituirli con "None"

Mapping to Models
------------------

Per ogni tabella del database è stato creato un ``Mapper`` mediante cui i dati vengono trasferiti dal dto al model

.. py:class:: Mapper

    .. py:classmethod:: to_model_list_boundary_info

        prende in ingresso la lista degli oggetti di un dto, e per ogni elemento della lista (ogni oggetto) tutti i campi vengono inseriti nel model mediante il metodo ``to_model``

    .. py:classmethod:: to_model

        prende in ingresso un oggetto del dto e mappa singolarmente ogni campo dal dto al model mediante le funzioni di set e get



Metodi di Insert
------------------

I dati così inseriti nei model vengono mappati nel database mediante insert query.
Questo avviene all'interno dei metodi definiti nella classe ``Repository``

.. py:class:: Repository

    :insert_query: query di insert in cui vengono specificati quali valori inserire in quale tabella

    .. py:classmethod:: populate_tabella

        prende in ingresso la lista contenente gli oggetti models e in un ciclo for scorro tutti gli elementi, ad uno ad uno ciascun oggetto viene scomposto nei suoi campi mediante il metodo ``model_to_tuple`` che mi da proprio i valori della INSERT; pertanto tutti i valori di un oggetto vengono mappati nel database ad ogni iterazione del ciclo.

Automatizzazione della procedura
--------------------------------
Una funzione che automatizza tutte le operazioni sopra descritte è il ``mapper_cycle``

.. py:function:: mapper_cycle (connection, lista_colonne)

    Questa funzione prende in ingresso solo la connessione e una lista contenente a sua volta liste con gli indici delle colonne da considerare per ciascun file. In particolare, viene settato di default un path e questa funzione si prende tutti i file excel che trova lì; questi ultimi vengono riordinati (perchè la creazione delle tabelle avviene secondo l'ordine nella lista) e poi singolarmente a questi file vengono applicate le funzioni to_dto, to_model_list e populate_tabella (grazie ad opportune reflection).

Per rendere più generale possibile questa procedura è stata creata un ulteriore funzione, ``genera_procedure``

.. py:function:: genera_procedure (connection)

    Questa funzione consente non solo di svolgere tutti i passaggi precedenti in modo auomatico, chiedendo solo all'utente l'inserimento dei nomi dei file excel e degli indici delle colonne che vuole prendere da questi, ma permette inoltre di salvare i passaggi effettuati (quindi quali file excel sono stati caricati e quali colonne di questi) in modo da consentire di ripetere la procedura in modo completamente automatico. Più nel dettaglio: Inizialmente si chiede se si vogliono eliminare delle tabelle dal database, se si vogliono (ri)creare e, se sono presenti delle procedure già memorizzate, se si vuole scegliere una di queste.  Se si sceglie una procedura esistente, basterà inserire il suo nome e il resto verrà fatto in modo completamente automatico; se invece si vuole eseguire una nuova procedura, il programma chiede di inserire i file in una cartella, di indicarne il numero e infine, nell'ordine in cui vogliono sia caricati, il nome del file excel e gli indici delle colonne relative (mostrando le colonne presenti in ciascun file). Dopodichè, le successive operazioni vengono seguite in modo automatico, a meno che non si desidera inserire anche le informazioni geometriche in alcune tabelle; in questo caso, viene ulteriormente chiesto di inserire il nome dello shapefile da caricare. Infine, se si è scelta una procedura manuale si chiede se si vuole salvarla (affinchè la successiva volta non si debbano reinserire tutti i dati manualmente). NB: attualmente, le procedure memorizzate contengono i file excel e relative colonne, ma non gli shapefile, che comunque andranno reinseriti manualmente.


Altre Funzioni
--------------

Funzione per eliminare le tabelle dal database: ``clear_schema_all``, ``clear_schema_geounit``, ``clear_schema_faults``, ``remake_schema_procedure``

.. py:function:: clear_schema_all (connection)

    Questa funzione prende in ingresso la connessione; al suo interno viene definita la query in cui vengono specificate le tabelle da eliminare e l'eliminazione viene eseguita mediante i comandi di execute e commit. Questa funzione elimina TUTTE le tabelle nel database (tranne quella "Procedure").

.. py:function:: clear_schema_geounit (connection)

    Questa funzione prende in ingresso la connessione; al suo interno viene definita la query in cui vengono specificate le tabelle da eliminare e l'eliminazione viene eseguita mediante i comandi di execute e commit. Questa funzione elimina le tabelle  relative all'unità geologica nel database.

.. py:function:: clear_schema_faults (connection)

    Questa funzione prende in ingresso la connessione; al suo interno viene definita la query in cui vengono specificate le tabelle da eliminare e l'eliminazione viene eseguita mediante i comandi di execute e commit. Questa funzione elimina le tabelle relative alle faglie nel database.

.. py:function:: remake_schema_procedure (connection)

    Questa funzione prende in ingresso la connessione; al suo interno viene definita la query in cui viene specificata la tabella "Procedure" da eliminare e l'eliminazione viene eseguita mediante i comandi di execute e commit.

Funzione per convertire una tabella in formato XML: ``table_to_xml``

.. py:function:: table_to_xml (table, schema, connection)

    Questa funzione prende in ingresso il nome della tabella, lo schema dove è definita e la connessione; queste informazioni servono per accedere alla specifica tabella nel database e prelevare tutte le informazioni in essa contenute, per poi riadattarle nel formato di output (xml).






